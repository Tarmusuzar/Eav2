
#include <trade/trade.mqh>;
CTrade trade;
int totalBars = iBars(_Symbol,PERIOD_CURRENT);
input double pipValue = 0.0004;

//Whether the previous candle was bullish or bearish
 bool isPreviousCandleGreen()
      {
          datetime prevCandleTime = iTime(Symbol(), PERIOD_D1, 1); // Get the time of the previous candle
          double prevOpen = iOpen(Symbol(), PERIOD_D1, 1); // Get the open price of the previous candle
          double prevClose = iClose(Symbol(), PERIOD_D1, 1); // Get the close price of the previous candle
      
          return prevClose > prevOpen; // Return true if the close price is greater than the open price (green candle)
      }

//MA declaration
const int MA_Period = 200;
const ENUM_MA_METHOD MA_Method = MODE_EMA;
const int Shift = 0;
const ENUM_APPLIED_PRICE AppliedPrice = PRICE_CLOSE;
int ma_current;

//MACD declaration
int handle;

int OnInit()
  {
  ma_current = iMA(_Symbol,PERIOD_CURRENT, MA_Period, Shift, MA_Method, AppliedPrice);
  handle = iMACD(_Symbol,PERIOD_CURRENT,12,26,9,PRICE_CLOSE);
   return(INIT_SUCCEEDED);
  }

void OnDeinit(const int reason)
  {

   
  }

void OnTick()
  {
   //MACD declarations
    
   double macd[];
   CopyBuffer(handle, MAIN_LINE, 1,2,macd);
   double signal[];
   CopyBuffer(handle, SIGNAL_LINE, 1,2, signal);
   
   //MA declarations
    double ma[];
   CopyBuffer(ma_current,MAIN_LINE,1,2,ma);
   
   //Upon new candle formation
    int bars = iBars(_Symbol, PERIOD_CURRENT);
   if(bars>totalBars )
     {
      totalBars = bars;
       double open = iOpen(_Symbol,PERIOD_CURRENT,1);
       double close = iClose(_Symbol, PERIOD_CURRENT, 1);
       double high = iHigh(_Symbol,PERIOD_CURRENT,1);
       double low = iLow(_Symbol,PERIOD_CURRENT,1);
        
       double wickSize = high-close;
       wickSize = NormalizeDouble(wickSize, _Digits);
       
       double sellWick = close-low;
       sellWick = NormalizeDouble(sellWick, _Digits);
      
        
      //
      if(open<close && wickSize>pipValue &&  (macd[1]>signal[1] && (macd[0]>signal[0]) &&  ma[0] < ma[1])){
         
           double buyEntry = SymbolInfoDouble(_Symbol,SYMBOL_ASK);
               buyEntry= NormalizeDouble(buyEntry,_Digits);
           //double pips = 0.75*(high - close);
           //double tpBuy = close+pips;
              // tpBuy =  NormalizeDouble(tpBuy, _Digits);
              
           
           trade.Buy(0.01,_Symbol,buyEntry,0.000,high);     
           
       
         
        
        }
  
          
           else if(open>close   &&  sellWick>pipValue &&(macd[1]<signal[1] && (macd[0]<signal[0]) &&  ma[0] >ma[1]))
        {
           double sellEntry = SymbolInfoDouble(_Symbol, SYMBOL_BID);
               sellEntry = NormalizeDouble(sellEntry,_Digits);
           //double sellPips = 0.75*(close-low);
               //sellPips = NormalizeDouble(sellPips,_Digits);
            //double sellTp = close-sellPips;
                // sellTp = NormalizeDouble(sellTp,_Digits);
           
           
           trade.Sell(0.01,_Symbol,sellEntry,0.00,low);
           
         
        }

     }
//(high-close)>0.00056)
   
  }
//+------------------------------------------------------------------+
